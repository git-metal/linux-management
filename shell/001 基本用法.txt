变量修饰：
    readonly    只读
    local   局部
    unset   删除

变量赋值：
    var=""
    var=`uname -r`
    var=$(uname -r)

单引号&双引号：
    引号里的任何字符都会原样输出（不转义），单引号字串中不能出现单引号

字符串操作：
    拼接：var="hello ${name}"
    获取字符串长度： echo ${#var}       expr length "${var}"
    提取子字符串： echo ${var:1:3} 下标从0开始，取第1~3个字符
    查找子字符串的位置：  expr index "$var" "$substr"
    分割:
        <cut>
            echo $var | cut -d ':' -f 1 | td -d " " | td -d [/a-zA-Z]
            cut -d ":" -f 1,3 /etc/passwd
        <awk:awk的标准输出命令是printf，默认分割符是空格或制表符。>
            #awk '条件1{动作1} 条件2{动作2} ...' 文件名
            #BEGIN：先执行一条多余的动作
            #END：用于在所有命令处理完之后执行
            #FS内置变量：用于定义分割符，如果需要手工定义分割符，一定要在分割符前面加BEGIN；
            echo $var | awk -F' ' '{print $1 $NF}'
            awk 'BEGIN {FS=":";print "begin test"} END{print "end test"} {print $1":"$3}' /etc/passwd
            lsblk | grep disk | awk 'NR>line{print $1}' line=$testline
    字符串替换:
        <sed> sed [-nefri] ‘command’ 输入文本


            sed -n '3p' /etc/fstab  #取第3行
            sed -n '2,$p' $file     #显示第2行到最后一行
            sed '2,4d' $file        #删除2~4行
            sed '1d' test           #删除第1行
            sed '$d' test           #删除最后一行
            sed '3,${/^$/d}' $file  #删除第3行之后的所有空行
            sed "6,$$d" $file       #删除第5行之后的所有行    -> sed '6,$d' $file




数组：
    array_name=(value0 value1 value2 value3)    下标从0开始，以空格分割
    赋值：array_name[index]=value
    读取：${array_name[index]}
    获取所有元素： ${array_name[@]}
    获取数组长度： ${#array_name[@]}   ${#array_name[*]}

脚本参数：
    $0: 脚本名，可能带上路径  
    $#: 传递到脚本的参数个数
    $*: 以一个单字符串显示所有向脚本传递的参数
    $$: 脚本运行的当前进程ID号
    $!: 后台运行的最后一个进程的ID号
    $@: 与$*相同，但是使用时加引号，并在引号中返回每个参数。  "$1" "$2" … "$n" 
    $-: 显示Shell使用的当前选项，与set命令功能相同。
    $?: 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。

基本运算符: （true: 0 ； false: 非0）
    expr 2 + 2
    expr 2 - 2
    expr 2 \* 2
    expr 2 / 2
    expr 2 % 10  #2
    expr 2 == 2 # $? = 0
    expr 2 == 2 # $? = 1
    if expr 2 == 2; then echo true; else cho false ;fi  #true
    if [ 2 == 2 ]; then echo true; else echo false ;fi  #true
    关系运算符: -eq -ne -gt -lt -ge -le
    布尔运算符: ! -o -a  #用在单中括号中 [ $a -lt 20 -o $b -gt 100 ]
    逻辑运算符: && ||    #用在双中括号中 [[ $a -lt 100 || $b -gt 100 ]] 
    字符串运算符：
        = ：是否相等
        !=:
        -z:长度是否为0，为0返回 true
        -n:长度是否为0，不为0返回 true
        str:检测字符串是否为空，不为空返回 true。 a="123"; [ $aa ] # $?=1
    文件测试运算符:
        -b(块) -c(字符) -d(目录) -f(普通文件) -p(管道) -r(可读) -w(可写) -x(可执行) -s(为空，大小为0) -e(存在)
        -g(SID位) -k(Sticky Bit) -u(SUID位)  

echo&printf
    echo -e #进行转义
    printf: printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543
        %-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）
        %-4.2f 指格式化为小数，其中.2指保留2位小数。
            d: Decimal 十进制整数
            s: String 字符串
            c: Char 字符
            f: Float 浮点

循环：
    for:
        for ((i=1; i<=10; i ++)); do echo $i; done
        for i in {1..10}; do echo $i; done
        for i in `seq 1 100`; do echo $i; done
        for i in `seq 1 10 100`; do echo $i; done
        for loop in 1 2 3 4 5; do echo $loop; done
    无限循环:
        while :
        while true
        for (( ; ; ))

重定向: 文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）
    输出: 
        > 2> &>（2>&1 > file； > file 2>&1 ）
        >> file #将文件描述符为 n 的文件以追加的方式重定向到 file
        n >& m  #将输出文件 m 和 n 合并。
        n <& m  #将输入文件 m 和 n 合并。
    输入:
        command < file： #将输入重定向到 file
        << tag  #将开始标记 tag 和结束标记 tag 之间的内容作为输入。


文件包含: (装一些公用的代码作为一个独立的文件)
    . filename   # 注意点号(.)和文件名中间有一空格
    source filename

[]与[[]]的区别:
    1、判断变量是否为空: 使用[]时需要在变量的外侧加上双引号，使用[[]]时则不用
    2、组合判断条件: 
        使用[[]]不能使用 -a -o对多个条件进行连接；
        使用[]对多个条件进行连接, -a -o必须在[]内，&& ||必须在[]之外
        =~ 只能用于[[]]中, []不使用使用 =~ 运算符


负载均衡原理：
    #四层负载均衡
        四层负载均衡工作在OSI模型的传输层，主要工作是转发，它在接收到客户端的流量以后通过修改数据包的地址信息将流量转发到应用服务器。

    #七层负载均衡
        七层负载均衡工作在OSI模型的应用层，因为它需要解析应用层流量，所以七层负载均衡在接到客户端的流量以后，还需要一个完整的TCP/IP协议栈。

    #对比
        1.七层负载均衡明显的对负载均衡设备的要求更高，处理七层的能力也必然会低于四层模式的部署方式
        2.七层应用负载的好处，是使得整个网络更"智能化"

负载均衡的几种实现方式：（DNS > 数据链路层 > IP层 > Http层）？
    #HTTP重定向: （不好）
        #过程描述
        当用户向服务器发起请求时，请求首先被集群调度者截获；调度者根据某种分配策略，选择一台服务器，并将选中的服务器的IP地址封装在HTTP响应消息头部的Location字段中，并将响应消息的状态码设为302，最后将这个响应消息返回给浏览器。
        当浏览器收到响应消息后，解析Location字段，并向该URL发起请求，然后指定的服务器处理该用户的请求，最后将结果返回给用户。
        
        用户的一项操作需要发起两次HTTP请求，一次向调度服务器发送请求，获取后端服务器的IP，第二次向后端服务器发送请求，获取处理结果

        #调度策略
            随机分配策略
            轮询策略(RR) 


    #DNS负载均衡：（不好） -> 动态DNS负载均衡（不好）
        #过程
        首先需要将我们的域名指向多个后端服务器(将一个域名解析到多个IP上)，再设置一下调度策略，那么我们的准备工作就完成了，接下来的负载均衡就完全由DNS服务器来实现。
        当用户向我们的域名发起请求时，DNS服务器会自动地根据我们事先设定好的调度策略选一个合适的IP返回给用户，用户再向该IP发起请求。


        #调度策略
            随机分配、轮询、根据请求者的地域分配离他最近的服务器

    #反向代理负载均衡：（7层）
        反向代理服务器根据用户的请求要么直接将结果返回给用户，要么将请求交给后端服务器处理，再返回给用户。

        #优点
            隐藏后端服务器：
            故障转移：能够更快速地移除故障结点
            合理分配任务：

        #缺点
            调度者压力过大：所有的请求都先由反向代理服务器处理，那么当请求量超过调度服务器的最大负载时，调度服务器的吞吐率降低会直接降低集群的整体性能
            制约扩展：当后端服务器也无法满足巨大的吞吐量时，就需要增加后端服务器的数量，可没办法无限量地增加，因为会受到调度服务器的最大吞吐量的制约

    #直接路由(LVS-DR)：（2层）
        直接路由是工作在数据链路层（第二层），貌似更屌些。它通过修改数据包的目标MAC地址（没有修改目标IP），将数据包转发到实际服务器上，不同的是，实际服务器的响应数据包将直接发送给客户羰，而不经过调度器。

    #IP负载均衡（SNAT）：（4层）
        IP负载均衡：即在网络层通过修改请求目标IP地址进行负载均衡。

    #IP隧道(LVS-TUN)
        基于IP隧道的请求转发机制：将调度器收到的IP数据包封装在一个新的IP数据包中，转交给实际服务器，然后实际服务器的响应数据包可以直接到达用户端。目前Linux大多支持，可以用LVS来实现，称为LVS-TUN，与LVS-DR不同的是，实际服务器可以和调度器不在同一个WANt网段，调度器通过IP隧道技术来转发请求到实际服务器，所以实际服务器也必须拥有合法的IP地址。

#负载均衡组件
    #apache
        它是Apache软件基金会的一个开放源代码的跨平台的网页服务器，属于老牌的web服务器了，支持基于Ip或者域名的虚拟主机，支持代理服务器，支持安全Socket层(SSL)等等，目前互联网主要使用它做静态资源服务器，也可以做代理服务器转发请求(如：图片链等)，结合tomcat等servlet容器处理jsp。

    #ngnix：反向代理负载均衡（7层）
        一个高性能的 HTTP和反向代理服务器

    #lvs （Linux Virtual Server）：
        数据链路层负载均衡是指在通信协议的数据链路层修改mac地址进行负载均衡。
        负载均衡数据分发过程中不修改IP地址，只修改目的的mac地址，通过配置真实物理服务器集群所有机器虚拟IP和负载均衡服务器IP地址一样，从而达到负载均衡，这种负载均衡方式又称为直接路由方式（DR）

    #HAProxy

    #keepalived

三大主流软件负载均衡器对比(LVS VS Nginx VS Haproxy)：
    参考：
        https://www.cnblogs.com/nineep/p/6795780.html
    #LVS：
    1、抗负载能力强。抗负载能力强、性能高，能达到F5硬件的60%；对内存和cpu资源消耗比较低
    2、工作在网络4层，通过vrrp协议转发（仅作分发之用），具体的流量由linux内核处理，因此没有流量的产生。
    2、稳定性、可靠性好，自身有完美的热备方案；（如：LVS+Keepalived）
    3、应用范围比较广，可以对所有应用做负载均衡；
    4、不支持正则处理，不能做动静分离。
    5、支持负载均衡算法：rr（轮循）、wrr（带权轮循）、lc（最小连接）、wlc（权重最小连接）
    6、配置 复杂，对网络依赖比较大，稳定性很高。

    #Nginx：
    1、工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构；
    2、Nginx对网络的依赖比较小，理论上能ping通就就能进行负载功能；
    3、Nginx安装和配置比较简单，测试起来比较方便；
    4、也可以承担高的负载压力且稳定，一般能支撑超过1万次的并发；
    5、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测。
    6、Nginx对请求的异步处理可以帮助节点服务器减轻负载；
    7、Nginx仅能支持http、https和Email协议，这样就在适用范围较小。
    8、不支持Session的直接保持，但能通过ip_hash来解决。、对Big request header的支持不是很好，
    9、支持负载均衡算法：Round-robin（轮循）、Weight-round-robin（带权轮循）、Ip-hash（Ip哈希）
    10、Nginx还能做Web服务器即Cache功能。

    #HAProxy的特点是：
    1、支持两种代理模式：TCP（四层）和HTTP（七层），支持虚拟主机；
    2、能够补充Nginx的一些缺点比如Session的保持，Cookie的引导等工作
    3、支持url检测后端的服务器出问题的检测会有很好的帮助。
    4、更多的负载均衡策略比如：动态加权轮循(Dynamic Round Robin)，加权源地址哈希(Weighted Source Hash)，加权URL哈希和加权参数哈希(Weighted Parameter Hash)已经实现
    5、单纯从效率上来讲HAProxy更会比Nginx有更出色的负载均衡速度。
    6、HAProxy可以对Mysql进行负载均衡，对后端的DB节点进行检测和负载均衡。
    9、支持负载均衡算法：Round-robin（轮循）、Weight-round-robin（带权轮循）、source（原地址保持）、RI（请求URL）、rdp-cookie（根据cookie）
    10、不能做Web服务器即Cache。
